###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 28/Apr/2019  16:16:30
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\I2C.c
#    Command line =  
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\I2C.c" -e --char_is_signed
#        -On --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_cross_call --debug --code_model medium --data_model medium -o
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\Obj\"
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8mmf.h" -lcN
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\List\" -lb
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\List\" -I
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\" -I
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_libSystem\Libraries\STM8L15x_StdPeriph_Driver\inc\"
#        --vregs 16
#    List file    =  
#        E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\List\I2C.lst
#    Object file  =  
#        E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\Obj\I2C.o
#
###############################################################################

E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\I2C.c
      1          #include "I2C.h"
      2          #include "stm8l15x_i2c.h"
      3          #include "stm8l15x.h"
      4          /**************************************************************************/
      5          /****************************************************************************
      6          * 名称：I2C_WriteByte(uint8_t addr,uint8_t data)
      7          * 功能：进行IIC的写操作。
      8          * 入口参数： uint8_t addr 寄存器的地址
      9          * uint8_t data 写入的数据 
     10          * 出口参数：无
     11          * 说明：对寄存器进行单字节写入操作，变量都是16进制
     12          ****************************************************************************/
     13          void I2C_WriteByte(unsigned char addr, unsigned char data)
     14          {
     15          	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)); //等待空闲
     16          
     17          	I2C_GenerateSTART(I2C1, ENABLE);//开启I2C1
     18          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));/*EV5,主模式*/
     19          	I2C_Send7bitAddress(I2C1, I2C1_WRITE_ADDRESS7, I2C_Direction_Transmitter);//器件地址 -- 默认0xD0
     20          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
     21          	I2C_SendData(I2C1, addr);//寄存器地址
     22          	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
     23          	I2C_SendData(I2C1, data);//发送数据
     24          	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
     25          	I2C_AcknowledgeConfig(I2C1,ENABLE);
     26          
     27          	I2C_GenerateSTOP(I2C1, ENABLE);//关闭I2C1总线
     28          }
     29          /****************************************************************************
     30          * 名称：uint8_t I2C_ReadByte(uint8_t addr)
     31          * 功能：进行IIC的读操作。
     32          * 入口参数： uint8_t addr 寄存器的地址 
     33          * 出口参数： uint8_t i 保存读到的数据并作为参数返回
     34          * 说明：对寄存器进行读出操作，变量都是16进制，IIC写操作要
     35          先写寄存器再进行读寄存器的操作，否则会失败
     36          ****************************************************************************/
     37          unsigned char I2C_ReadByte(uint8_t addr)
     38          {
     39          	unsigned char i;
     40          
     41          	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
     42          
     43          	I2C_GenerateSTART(I2C1, ENABLE);//开启I2C1
     44          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));/*EV5,主模式*/
     45          	I2C_Send7bitAddress(I2C1, I2C1_WRITE_ADDRESS7, I2C_Direction_Transmitter);//器件地址 -- 默认0xD0
     46          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
     47          	I2C_SendData(I2C1, addr);//寄存器地址
     48          	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
     49          
     50          
     51          
     52          	I2C_GenerateSTART(I2C1, ENABLE);//开启I2C1
     53          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));/*EV5,主模式*/
     54          
     55          	I2C_Send7bitAddress(I2C1, I2C1_READ_ADDRESS7, I2C_Direction_Receiver);//器件地址 -- 默认0xD1
     56          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
     57          
     58          
     59          	while (!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_RECEIVED));
     60          	i=I2C_ReceiveData(I2C1);//读取数据
     61          
     62          	I2C_AcknowledgeConfig(I2C1,DISABLE);
     63          
     64          	I2C_GenerateSTOP(I2C1, ENABLE);//关闭I2C1总线
     65          
     66          	return i;
     67          }
     68          /****************************************************************************
     69          * 名称：s8 I2C_Send_STRING(u8 addr, u8*array,u8 cnt);
     70          * 功能：连续写IIC。
     71          * 入口参数： uint8_t addr 寄存器的地址 ,要写字符串的起始地址u8*array,要写字符串的长度cnt。
     72          * 出口参数： 写操作执行结果作为参数返回   成功返回0 失败返回-1.
     73          * 说明：对寄存器进行连续写入操作，变量都是16进制
     74          ****************************************************************************/
     75          signed char I2C_Send_STRING(unsigned char dev_addr, unsigned char*array,unsigned char cnt)
     76          {
     77          	unsigned char i=0;
     78          
     79          	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY)); //等待空闲
     80          
     81          	I2C_GenerateSTART(I2C1, ENABLE);//开启I2C1
     82          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));/*EV5,主模式*/
     83          	I2C_Send7bitAddress(I2C1, (dev_addr<<1), I2C_Direction_Transmitter);//器件地址 -- 默认0xD0
     84          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
     85          	I2C_SendData(I2C1, array[0]);//寄存器地址	
     86          	for(i=1;i<cnt;i++)
     87          	{	
     88          		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
     89          		I2C_SendData(I2C1, array[i]);//发送数据
     90          	}
     91          	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
     92          	I2C_AcknowledgeConfig(I2C1,ENABLE);
     93          
     94          	I2C_GenerateSTOP(I2C1, ENABLE);//关闭I2C1总线
     95          
     96          	return 0;
     97          }
     98          
     99          signed char I2C_WRITE_READ_STRING(unsigned char dev_addr,unsigned char *array, unsigned char cnt)
    100          {
    101          	unsigned char i;
    102          
    103          	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
    104          
    105          	I2C_GenerateSTART(I2C1, ENABLE);//开启I2C1
    106          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));/*EV5,主模式*/
    107          	I2C_Send7bitAddress(I2C1,(dev_addr<<1) , I2C_Direction_Transmitter);//器件地址 -- 默认0xD0
    108          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    109          	I2C_SendData(I2C1, array[0]);//寄存器地址
    110          	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    111          
    112          
    113          
    114          	I2C_GenerateSTART(I2C1, ENABLE);//开启I2C1
    115          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));/*EV5,主模式*/
    116          
    117          	I2C_Send7bitAddress(I2C1, ((dev_addr<<1)+1), I2C_Direction_Receiver);//器件地址 -- 默认0xD1
    118          	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
    119          
    120          	for(i=0;i<cnt;i++)
    121          	{
    122          		while (!I2C_CheckEvent(I2C1,I2C_EVENT_MASTER_BYTE_RECEIVED));
    123          		array[i]=I2C_ReceiveData(I2C1);//读取数据
    124          	}
    125          
    126          	I2C_AcknowledgeConfig(I2C1,DISABLE);
    127          
    128          	I2C_GenerateSTOP(I2C1, ENABLE);//关闭I2C1总线
    129          
    130          	return 0;
    131          }
    132          void Gsensor_IIC_Init(void)
    133          {
    134          	GPIO_Init(IIC_SCL_T, IIC_SCL_P|IIC_SDA_P, GPIO_Mode_Out_OD_HiZ_Slow);
    135          	//EXTI_SetPinSensitivity(EXTI_Pin_2, EXTI_Trigger_Falling_Low);
    136          	//GPIO_Init(IIC_INT_T,IIC_INT_P, GPIO_Mode_In_FL_IT);
    137          	CLK_PeripheralClockConfig(CLK_Peripheral_I2C1 , ENABLE );
    138          	I2C_DeInit(I2C1);
    139          	I2C_Init(I2C1, I2C_MAX_STANDARD_FREQ, IIC_ADDRESS, I2C_Mode_I2C, I2C_DutyCycle_2,I2C_Ack_Enable, I2C_AcknowledgedAddress_7bit );
    140          }
    141          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      60  Gsensor_IIC_Init
     194  I2C_ReadByte
     183  I2C_Send_STRING
     242  I2C_WRITE_READ_STRING
     144  I2C_WriteByte

 
 823 bytes in section .far_func.text
 
 823 bytes of CODE memory

Errors: none
Warnings: none
