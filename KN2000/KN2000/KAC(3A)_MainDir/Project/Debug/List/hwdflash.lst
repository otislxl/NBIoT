###############################################################################
#
# IAR C/C++ Compiler V2.10.4.157 for STM8                 28/Apr/2019  15:24:12
# Copyright 2010-2015 IAR Systems AB.
#
#    Source file  =  E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\hwdflash.c
#    Command line =  
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\hwdflash.c" -e
#        --char_is_signed -On --no_cse --no_unroll --no_inline --no_code_motion
#        --no_tbaa --no_cross_call --debug --code_model medium --data_model
#        medium -o
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\Obj\"
#        --dlib_config "C:\Program Files\IAR Systems\Embedded Workbench
#        7.0\stm8\LIB\dlstm8mmf.h" -lcN
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\List\" -lb
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\List\" -I
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\" -I
#        "E:\PETPOSITION\KN2000(01)\KAC(3A)_libSystem\Libraries\STM8L15x_StdPeriph_Driver\inc\"
#        --vregs 16
#    List file    =  
#        E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\List\hwdflash.lst
#    Object file  =  
#        E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\Project\Debug\Obj\hwdflash.o
#
###############################################################################

E:\PETPOSITION\KN2000(01)\KAC(3A)_MainDir\hwdflash.c
      1          /****************************************Copyright (c)**************************************************                         
      2          **------------------------------------------------------------------------------------------------------
      3          ** Modified by:			
      4          ** Modified date:	
      5          ** Version:
      6          ** Descriptions:		
      7          ********************************************************************************************************/
      8          
      9          /* Includes ------------------------------------------------------------------*/
     10          #include "hwdflash.h"
     11          
     12          /*flash初始化写保护*/
     13          void hw_eeprom_flash_init(void)
     14          {
     15          	/* Define flash programming Time*/
     16          	FLASH_SetProgrammingTime(FLASH_ProgramTime_Standard);
     17          
     18          	FLASH_Lock(FLASH_MemType_Program);
     19          	while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == SET);
     20          }
     21          
     22          /*******************************************************************************
     23          Dst: 目标地址,范围 0x0 - MAX_ADDR
     24          RcvBufPt: 接收缓存的指针
     25          NByte: 要读取的数据字节数	
     26          
     27          操作成功则返回OK,失败则返回ERROR
     28          
     29          *******************************************************************************/
     30          void hw_eeprom_read_bytes(uint8 Dst, uint8* RcvBufPt ,uint8 NByte)
     31          {
     32          	uint32_t i=0,add, startadd, stopadd = 0;
     33          	startadd = FLASH_DATA_EEPROM_START_PHYSICAL_ADDRESS + ((uint16_t)BLOCK_OPERATION * (uint16_t)FLASH_BLOCK_SIZE+Dst);
     34          	stopadd = startadd + NByte;
     35          	for (add = startadd; add < stopadd; add++)
     36          	{
     37          		RcvBufPt[i++] = FLASH_ReadByte(add);
     38          	}
     39          }
     40          
     41          /*******************************************************************************
     42          Dst: 目标地址,范围 0x0 - MAX_ADDR（MAX_ADDR = 0x7FFFFF）
     43          SndbufPt: 发送缓存区指针
     44          NByte: 要写的数据字节数
     45          
     46          操作成功则返回OK,失败则返回ERROR
     47          *******************************************************************************/
     48          void hw_eeprom_write_bytes(uint8 Dst, uint8* SndbufPt,uint8 NByte)
     49          {
     50          	uint32_t i=0,startadd;
     51          	startadd = FLASH_DATA_EEPROM_START_PHYSICAL_ADDRESS + ((uint16_t)BLOCK_OPERATION * (uint16_t)FLASH_BLOCK_SIZE+Dst);
     52          
     53          	/* Unlock flash data eeprom memory */
     54          	FLASH_Unlock(FLASH_MemType_Data);
     55          	/* Wait until Data EEPROM area unlocked flag is set*/
     56          	while (FLASH_GetFlagStatus(FLASH_FLAG_DUL) == RESET)
     57          	{}
     58          
     59            	for(i=0;i<NByte;i++)
     60            	{
     61            		FLASH_ProgramByte((startadd+i),SndbufPt[i]);
     62          		/* Wait until End of high voltage flag is set*/
     63          		while (FLASH_GetFlagStatus(FLASH_FLAG_HVOFF) == RESET)
     64          		{}
     65            	}
     66          	FLASH_Lock(FLASH_MemType_Data);
     67          	while (FLASH_GetFlagStatus(FLASH_FLAG_DUL) == SET)
     68          	{}
     69          }
     70          
     71          /*******************************************************************************
     72          Dst: 目标地址,范围 0x0 - MAX_ADDR（MAX_ADDR = 0x7FFFFF）
     73          SndbufPt: 发送缓存区指针
     74          NByte: 要写的数据字节数
     75          
     76          操作成功则返回OK,失败则返回ERROR
     77          *******************************************************************************/
     78          uint8_t hw_flash_write_bytes(uint32_t Dst, uint8_t* SndbufPt,uint32_t NByte)
     79          {
     80          	FLASH_Unlock(FLASH_MemType_Program);
     81          	/* Wait until Flash Program area unlocked flag is set*/
     82          	while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == RESET)
     83          	{}
     84          
     85          	FLASH_Lock(FLASH_MemType_Program);
     86          	while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == SET)
     87          	{}
     88                  
     89                  return 0;
     90          }
     91          
     92          uint8_t hw_flash_write_block(uint32_t Dst, uint8_t* SndbufPt)
     93          {
     94          	FLASH_Unlock(FLASH_MemType_Program);
     95          	/* Wait until Flash Program area unlocked flag is set*/
     96          	while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == RESET)
     97          	{}
     98          
     99          	/* This function is executed from RAM */
    100          	FLASH_ProgramBlock(Dst, FLASH_MemType_Data, FLASH_ProgramMode_Standard, SndbufPt);
    101          
    102          	/* Wait until End of high voltage flag is set*/
    103          	while (FLASH_GetFlagStatus(FLASH_FLAG_HVOFF) == RESET)
    104          	{}
    105          
    106          	FLASH_Lock(FLASH_MemType_Program);
    107          	while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == SET)
    108          	{}
    109               
    110                  return 0;
    111          }
    112          uint8_t hw_flash_erase_block(uint32_t Dst)
    113          {
    114          	FLASH_Unlock(FLASH_MemType_Program);
    115          	/* Wait until Flash Program area unlocked flag is set*/
    116          	while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == RESET)
    117          	{}
    118          
    119          	/* Erase block 0 and verify it */
    120          	/* This function is executed from RAM */
    121          	FLASH_EraseBlock(Dst, FLASH_MemType_Program);
    122          
    123          	FLASH_Lock(FLASH_MemType_Program);
    124          	while (FLASH_GetFlagStatus(FLASH_FLAG_PUL) == SET)
    125          	{}
    126                  
    127                  return 0;
    128          }
    129          
    130          /*********************************************************************************************************
    131                END FILE
    132          *********************************************************************************************************/
    133          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      22  hw_eeprom_flash_init
     137  hw_eeprom_read_bytes
     149  hw_eeprom_write_bytes
      53  hw_flash_erase_block
      74  hw_flash_write_block
      56  hw_flash_write_bytes

 
 491 bytes in section .far_func.text
 
 491 bytes of CODE memory

Errors: none
Warnings: none
